/* eslint-disable react-hooks/exhaustive-deps */
"use client";

import React, { useEffect, useState } from "react";
import { HeroUIProvider } from "@heroui/react";
import { AbstractIntlMessages, NextIntlClientProvider } from "next-intl";
import { useImageFunctionStore, useUserStore } from "@/stores";
import { SessionUserProps } from "@/interfaces";
import { usePathname, useRouter } from "next/navigation";
import VestiqWrapper from "@/components/templates/wrappers/VestiqWrapper";

export default function Providers({
  children,
  messages,
  timeZone,
  locale,
  session,
}: {
  children: React.ReactNode;
  messages: AbstractIntlMessages;
  timeZone: string;
  locale: string;
  session: SessionUserProps | null;
}) {
  const { user, setUser } = useUserStore();
  const { imageFunctions, getImageFunctions } = useImageFunctionStore();
  const pathname = usePathname();
  const router = useRouter();
  const [isAuthorized, setIsAuthorized] = useState(false);

  // ğŸ”¹ Rotas privadas (sem o prefixo do idioma)
  const privateRoutes = ["/main"];
  const pathWithoutLocale = pathname.replace(`/${locale}`, "") || "/";

  // ğŸ”¹ Verifica se alguma rota privada Ã© um PREFIXO da URL atual (ex: /main/generations)
  const isPrivateRoute = privateRoutes.some((route) =>
    pathWithoutLocale.startsWith(route)
  );

  // ğŸ”¹ FunÃ§Ã£o para verificar se hÃ¡ sessÃ£o e carregar o usuÃ¡rio
  const handleSessionCheck = async () => {
    if (user) {
      setIsAuthorized(true);
      console.log("âœ… UsuÃ¡rio jÃ¡ estÃ¡ autenticado no Zustand.");
      return;
    }

    if (session) {
      console.log("ğŸ“Œ Carregando usuÃ¡rio a partir da sessÃ£o...");
      setUser(session.session_user);
      setIsAuthorized(true);
    } else if (isPrivateRoute) {
      console.log("ğŸ”´ Nenhuma sessÃ£o encontrada. Redirecionando para /auth");
      router.push(`/auth`);
    }
  };

  useEffect(() => {
    handleSessionCheck();
  }, [session, user]); // Executa apenas quando a sessÃ£o ou usuÃ¡rio mudar

  useEffect(() => {
    if (imageFunctions.length === 0) {
      getImageFunctions(locale as string);
    }
  }, [locale]);

  useEffect(() => {
    console.log("UsuÃ¡rio carregado do Zustand:", user);
  }, [user]);

  // ğŸ”¹ Se a rota for privada e o usuÃ¡rio estiver autenticado, coloca o conteÃºdo dentro do VestiqWrapper
  const content = isPrivateRoute ? (
    <VestiqWrapper>{children}</VestiqWrapper>
  ) : (
    children
  );

  return (
    <NextIntlClientProvider
      timeZone={timeZone}
      messages={messages}
      locale={locale}
    >
      <HeroUIProvider>{content}</HeroUIProvider>
    </NextIntlClientProvider>
  );
}
